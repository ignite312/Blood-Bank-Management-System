[{"/Users/emon/Desktop/Blood-Bank-Management-System/src/index.js":"1","/Users/emon/Desktop/Blood-Bank-Management-System/src/App.js":"2","/Users/emon/Desktop/Blood-Bank-Management-System/src/reportWebVitals.js":"3","/Users/emon/Desktop/Blood-Bank-Management-System/src/UserAccess/Request.js":"4","/Users/emon/Desktop/Blood-Bank-Management-System/src/Pages/Dashboard.js":"5","/Users/emon/Desktop/Blood-Bank-Management-System/src/Pages/Home.js":"6","/Users/emon/Desktop/Blood-Bank-Management-System/src/UserAccess/LoginStaff.js":"7","/Users/emon/Desktop/Blood-Bank-Management-System/src/UserAccess/Appointment.js":"8","/Users/emon/Desktop/Blood-Bank-Management-System/src/UserAccess/CreateID.js":"9","/Users/emon/Desktop/Blood-Bank-Management-System/src/Pages/ViewDonor.js":"10","/Users/emon/Desktop/Blood-Bank-Management-System/src/Pages/DonorInput.js":"11","/Users/emon/Desktop/Blood-Bank-Management-System/src/Pages/DataInput.js":"12"},{"size":535,"mtime":1700302107074,"results":"13","hashOfConfig":"14"},{"size":957,"mtime":1700302577339,"results":"15","hashOfConfig":"14"},{"size":362,"mtime":1700302107074,"results":"16","hashOfConfig":"14"},{"size":4435,"mtime":1700302107067,"results":"17","hashOfConfig":"14"},{"size":3348,"mtime":1700302107067,"results":"18","hashOfConfig":"14"},{"size":916,"mtime":1700302107067,"results":"19","hashOfConfig":"14"},{"size":2020,"mtime":1700302107067,"results":"20","hashOfConfig":"14"},{"size":2057,"mtime":1700302107067,"results":"21","hashOfConfig":"14"},{"size":8537,"mtime":1700302107067,"results":"22","hashOfConfig":"14"},{"size":1291,"mtime":1700302107067,"results":"23","hashOfConfig":"14"},{"size":4853,"mtime":1700302107067,"results":"24","hashOfConfig":"14"},{"size":2437,"mtime":1700302107067,"results":"25","hashOfConfig":"14"},{"filePath":"26","messages":"27","suppressedMessages":"28","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"zebkcy",{"filePath":"29","messages":"30","suppressedMessages":"31","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"32","messages":"33","suppressedMessages":"34","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"35","messages":"36","suppressedMessages":"37","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"38"},{"filePath":"39","messages":"40","suppressedMessages":"41","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"42"},{"filePath":"43","messages":"44","suppressedMessages":"45","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"46","messages":"47","suppressedMessages":"48","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"49","messages":"50","suppressedMessages":"51","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"52"},{"filePath":"53","messages":"54","suppressedMessages":"55","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"56"},{"filePath":"57","messages":"58","suppressedMessages":"59","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"60","messages":"61","suppressedMessages":"62","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"63"},{"filePath":"64","messages":"65","suppressedMessages":"66","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"67"},"/Users/emon/Desktop/Blood-Bank-Management-System/src/index.js",[],[],"/Users/emon/Desktop/Blood-Bank-Management-System/src/App.js",[],[],"/Users/emon/Desktop/Blood-Bank-Management-System/src/reportWebVitals.js",[],[],"/Users/emon/Desktop/Blood-Bank-Management-System/src/UserAccess/Request.js",["68"],[],"import React, { useState, useEffect } from 'react';\nimport '../App.css';\nimport '../styles.css';\n\n\nfunction RequestForm({ onFormSubmit }) {\n  const [requestData, setRequestData] = useState({\n    patient_id: '',\n    quantity: 1,\n    blood_group: '',\n    hospital_name: '',\n  });\n\n  const [loading, setLoading] = useState(false);\n  const [patients, setPatients] = useState([]);\n\n  useEffect(() => {\n    // Fetch and set the list of patients\n    const fetchPatients = async () => {\n      try {\n        const response = await fetch('http://localhost:3000/api/get-patients');\n        if (response.ok) {\n          const data = await response.json();\n          setPatients(data.patients);\n        } else {\n          console.error('Failed to fetch patients');\n        }\n      } catch (error) {\n        console.error('Error fetching patients:', error);\n      }\n    };\n\n    fetchPatients();\n  }, []);\n\n  const handleInputChange = (e) => {\n    const { name, value } = e.target;\n    setRequestData((prevRequestData) => ({\n      ...prevRequestData,\n      [name]: value,\n    }));\n  };\n\n  const handleQuantityChange = (amount) => {\n    setRequestData((prevRequestData) => ({\n      ...prevRequestData,\n      quantity: Math.max(1, prevRequestData.quantity + amount),\n    }));\n  };\n\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n\n    try {\n      setLoading(true);\n\n      const response = await fetch('http://localhost:3000/api/insert-request', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n          ...requestData,\n          request_date: new Date().toISOString().split('T')[0],\n        }),\n      });\n\n      if (response.ok) {\n        console.log('Request data successfully inserted into the database');\n        // Optionally, reset the form or provide feedback to the user\n        setRequestData({\n          patient_id: '',\n          quantity: 1,\n          blood_group: '',\n          hospital_name: '',\n        });\n        onFormSubmit(requestData);\n      } else {\n        console.error('Failed to insert request data into the database');\n        // Optionally, provide user-friendly error message or feedback\n      }\n    } catch (error) {\n      console.error('Error:', error);\n      // Optionally, provide user-friendly error message or feedback\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  return (\n    <div>\n      <h2>Request Information</h2>\n      <form onSubmit={handleSubmit} className=\"user-input-form\">\n        <div>\n          <label htmlFor=\"patient_id\">Patient ID:</label>\n          <input\n            type=\"text\"\n            id=\"patient_id\"\n            name=\"patient_id\"\n            value={requestData.patient_id}\n            onChange={handleInputChange}\n          />\n        </div>\n        <div>\n          <label htmlFor=\"quantity\">Quantity:</label>\n          <div className=\"quantity-input\">\n            <button type=\"button\" onClick={() => handleQuantityChange(-1)}>\n              -\n            </button>\n            <span>{requestData.quantity}</span>\n            <button type=\"button\" onClick={() => handleQuantityChange(1)}>\n              +\n            </button>\n          </div>\n        </div>\n        <div>\n          <label htmlFor=\"blood_group\">Blood Group:</label>\n          <select\n            id=\"blood_group\"\n            name=\"blood_group\"\n            value={requestData.blood_group}\n            onChange={handleInputChange}\n          >\n            <option value=\"\">Select Blood Group</option>\n            <option value=\"A+\">A+</option>\n            <option value=\"A-\">A-</option>\n            <option value=\"B+\">B+</option>\n            <option value=\"B-\">B-</option>\n            <option value=\"AB+\">AB+</option>\n            <option value=\"AB-\">AB-</option>\n            <option value=\"O+\">O+</option>\n            <option value=\"O-\">O-</option>\n          </select>\n        </div>\n        <div>\n          <label htmlFor=\"hospital_name\">Hospital Name:</label>\n          <input\n            type=\"text\"\n            id=\"hospital_name\"\n            name=\"hospital_name\"\n            value={requestData.hospital_name}\n            onChange={handleInputChange}\n          />\n        </div>\n        <div>\n          <button type=\"submit\" className=\"submit-button\" disabled={loading}>\n            {loading ? 'Submitting...' : 'Submit'}\n          </button>\n        </div>\n      </form>\n    </div>\n  );\n}\n\nexport default RequestForm;\n","/Users/emon/Desktop/Blood-Bank-Management-System/src/Pages/Dashboard.js",["69","70","71"],[],"import React, { useState } from 'react';\nimport { Link, Route, Routes } from 'react-router-dom';\nimport ViewDonor from './ViewDonor';\nimport DonorInput from './DonorInput';\nimport '../styles.css';\nimport '../App.css';\nimport logo from '../image/spectre.jpg';\nimport DataInput from './DataInput';\n\nfunction HomePage() {\n  const [selectedOption, setSelectedOption] = useState(null);\n  const [showDefaultContent, setShowDefaultContent] = useState(true);\n\n  const option1Content = <ViewDonor />;\n  const option2Content = (\n    <div>\n      <h2>Option 2 Content</h2>\n      <p>This is the content for Option 2.</p>\n    </div>\n  );\n  const option3Content = (\n    <div>\n      <h2>Option 3 Content</h2>\n      <p>This is the content for Option 3.</p>\n    </div>\n  );\n  const option4Content = <DataInput />;\n\n  // Handle option click\n  const handleOptionClick = (option) => {\n    setSelectedOption(option);\n    setShowDefaultContent(false);\n  };\n\n  // Handle Home button click\n  const handleHomeClick = () => {\n    setSelectedOption(null); // Reset the selected option\n    setShowDefaultContent(true);\n  };\n\n  return (\n    <div>\n      <div className=\"header-container\">\n        <img src={logo} className=\"rotating-logo\" alt=\"logo\" />\n        <h1>Blood Management System</h1>\n      </div>\n      <div className=\"button-container\">\n        <div className=\"options-container\">\n          <button\n            onClick={() => handleOptionClick(option1Content)}\n            className=\"custom-button bigger-button\"\n          >\n            Donor/Recipient\n          </button>\n          <button\n            onClick={() => handleOptionClick(option2Content)}\n            className=\"custom-button bigger-button\"\n          >\n            Appointment\n          </button>\n          <button\n            onClick={() => handleOptionClick(option3Content)}\n            className=\"custom-button bigger-button\"\n          >\n            Health Checkup\n          </button>\n          <Link to=\"/DataInput\" className=\"custom-button bigger-button link-button\">\n            Donor/Recipient Input\n          </Link>\n          {/* Add four more buttons */}\n          <button\n            onClick={() => handleOptionClick(<div>Option 4 Content</div>)}\n            className=\"custom-button bigger-button\"\n          >\n            Option 4\n          </button>\n          <button\n            onClick={() => handleOptionClick(<div>Option 5 Content</div>)}\n            className=\"custom-button bigger-button\"\n          >\n            Option 5\n          </button>\n          <button\n            onClick={() => handleOptionClick(<div>Option 6 Content</div>)}\n            className=\"custom-button bigger-button\"\n          >\n            Option 6\n          </button>\n          <button\n            onClick={() => handleOptionClick(<div>Option 7 Content</div>)}\n            className=\"custom-button bigger-button\"\n          >\n            Option 7\n          </button>\n        </div>\n      </div>\n\n      {showDefaultContent ? (\n        <div></div>\n      ) : (\n        <div className=\"content-container\">\n          {/* Use Routes to render the selected option based on the route */}\n          <Routes>\n            <Route path=\"/DataInput\" element={<DataInput />} />\n            <Route path=\"/\" element={<>{selectedOption}</>} />\n          </Routes>\n        </div>\n      )}\n    </div>\n  );\n}\n\nexport default HomePage;\n","/Users/emon/Desktop/Blood-Bank-Management-System/src/Pages/Home.js",[],[],"/Users/emon/Desktop/Blood-Bank-Management-System/src/UserAccess/LoginStaff.js",[],[],"/Users/emon/Desktop/Blood-Bank-Management-System/src/UserAccess/Appointment.js",["72"],[],"import React, { useState, useEffect } from 'react';\nimport { toast } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\n\nfunction AppointmentForm({ onFormSubmit }) {\n  const [donorId, setDonorId] = useState('');\n  const [loading, setLoading] = useState(false);\n\n  const handleInputChange = (e) => {\n    setDonorId(e.target.value);\n  };\n\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n\n    try {\n      setLoading(true);\n\n      const response = await fetch('http://localhost:3000/api/create-appointment', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n          donor_id: donorId,\n        }),\n      });\n\n      if (response.ok) {\n        console.log('Appointment data successfully inserted into the database');\n        // Display toast message for success\n        toast.success('Appointment data successfully inserted into the database');\n        // Optionally, reset the form or provide feedback to the user\n        setDonorId('');\n        onFormSubmit();\n      } else {\n        console.error('Failed to insert appointment data into the database');\n        // Optionally, provide user-friendly error message or feedback\n      }\n    } catch (error) {\n      console.error('Error:', error);\n      // Optionally, provide user-friendly error message or feedback\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  return (\n    <div>\n      <h2>Appointment Information</h2>\n      <form onSubmit={handleSubmit} className=\"user-input-form\">\n        <div>\n          <label htmlFor=\"donor_id\">Donor ID:</label>\n          <input\n            type=\"text\"\n            id=\"donor_id\"\n            name=\"donor_id\"\n            value={donorId}\n            onChange={handleInputChange}\n          />\n        </div>\n        <div>\n          <button type=\"submit\" className=\"submit-button\" disabled={loading}>\n            {loading ? 'Submitting...' : 'Submit'}\n          </button>\n        </div>\n      </form>\n    </div>\n  );\n}\n\nexport default AppointmentForm;\n","/Users/emon/Desktop/Blood-Bank-Management-System/src/UserAccess/CreateID.js",["73","74","75"],[],"import React, { useEffect, useState } from 'react';\nimport '../App.css';\nimport '../styles.css';\n\nfunction UserDataInput({ onUserInput }) {\n    const [userData, setUserData] = useState({\n        person_id: '',\n        full_name: '',\n        age: '',\n        gender: '',\n        address: '',\n        blood_group: '',\n        phone_number: '',\n        email: '',\n        is_public_donor: '',\n    });\n\n    const [loading, setLoading] = useState(false);\n    const [submissionStatus, setSubmissionStatus] = useState(null);\n\n    const handleInputChange = (e) => {\n        const { name, value } = e.target;\n        setUserData((prevUserData) => ({\n            ...prevUserData,\n            [name]: value,\n        }));\n    };\n\n    const handleSubmit = async (e) => {\n        e.preventDefault();\n\n        try {\n            setLoading(true);\n\n            const response = await fetch('http://localhost:3000/api/insert-data', {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/json',\n                },\n                body: JSON.stringify(userData),\n            });\n\n            if (response.ok) {\n                console.log('Data successfully inserted into the database');\n                setSubmissionStatus('success');\n                // Optionally, reset the form or provide feedback to the user\n                setUserData({\n                    person_id: '',\n                    full_name: '',\n                    age: '',\n                    gender: '',\n                    address: '',\n                    blood_group: '',\n                    phone_number: '',\n                    email: '',\n                    is_public_donor: '',\n                });\n                onUserInput(userData);\n            } else {\n                console.error('Failed to insert data into the database');\n                setSubmissionStatus('failure');\n                // Optionally, provide user-friendly error message or feedback\n            }\n        } catch (error) {\n            console.error('Error:', error);\n            setSubmissionStatus('failure');\n            // Optionally, provide user-friendly error message or feedback\n        } finally {\n            setLoading(false);\n        }\n    };\n\n    const handleKeyDown = (e) => {\n        const activeElement = document.activeElement;\n        const inputFields = Array.from(document.getElementsByTagName('input'));\n        const currentIndex = inputFields.indexOf(activeElement);\n\n        if (e.key === 'ArrowDown') {\n            e.preventDefault();\n            const nextIndex = (currentIndex + 1) % inputFields.length;\n            inputFields[nextIndex].focus();\n        } else if (e.key === 'ArrowUp') {\n            e.preventDefault();\n            const prevIndex = (currentIndex - 1 + inputFields.length) % inputFields.length;\n            inputFields[prevIndex].focus();\n        }\n    };\n\n    return (\n        <div>\n            <h2>Donor/Patient Information</h2>\n            <form onSubmit={handleSubmit} className=\"user-input-form\" onKeyDown={handleKeyDown}>\n                <div>\n                    <label htmlFor=\"person_id\">ID:</label>\n                    <input\n                        type=\"text\"\n                        id=\"person_id\"\n                        name=\"person_id\"\n                        value={userData.person_id}\n                        onChange={handleInputChange}\n                    />\n                </div>\n                <div>\n                    <label htmlFor=\"full_name\">Full Name:</label>\n                    <input\n                        type=\"text\"\n                        id=\"full_name\"\n                        name=\"full_name\"\n                        value={userData.full_name}\n                        onChange={handleInputChange}\n                    />\n                </div>\n                <div>\n                    <label htmlFor=\"age\">Age:</label>\n                    <input\n                        type=\"text\"\n                        id=\"age\"\n                        name=\"age\"\n                        value={userData.age}\n                        onChange={handleInputChange}\n                    />\n                </div>\n                <div>\n                    <label htmlFor=\"gender\">Gender:</label>\n                    <select\n                        id=\"gender\"\n                        name=\"gender\"\n                        value={userData.gender}\n                        onChange={handleInputChange}\n                    >\n                        <option value=\"\">Select Gender</option>\n                        <option value=\"Male\">Male</option>\n                        <option value=\"Female\">Female</option>\n                        <option value=\"Other\">Other</option>\n                    </select>\n                </div>\n                <div>\n                    <label htmlFor=\"address\">Address:</label>\n                    <input\n                        type=\"text\"\n                        id=\"address\"\n                        name=\"address\"\n                        value={userData.address}\n                        onChange={handleInputChange}\n                    />\n                </div>\n                <div>\n                    <label htmlFor=\"blood_group\">Blood Group:</label>\n                    <select\n                        id=\"blood_group\"\n                        name=\"blood_group\"\n                        value={userData.blood_group}\n                        onChange={handleInputChange}\n                    >\n                        <option value=\"\">Select Blood Group</option>\n                        <option value=\"A+\">A+</option>\n                        <option value=\"A-\">A-</option>\n                        <option value=\"B+\">B+</option>\n                        <option value=\"B-\">B-</option>\n                        <option value=\"AB+\">AB+</option>\n                        <option value=\"AB-\">AB-</option>\n                        <option value=\"O+\">O+</option>\n                        <option value=\"O-\">O-</option>\n                    </select>\n                </div>\n                <div>\n                    <label htmlFor=\"phone_number\">Phone Number:</label>\n                    <input\n                        type=\"text\"\n                        id=\"phone_number\"\n                        name=\"phone_number\"\n                        value={userData.phone_number}\n                        onChange={handleInputChange}\n                    />\n                </div>\n                <div>\n                    <label htmlFor=\"email\">Email:</label>\n                    <input\n                        type=\"text\"\n                        id=\"email\"\n                        name=\"email\"\n                        value={userData.email}\n                        onChange={handleInputChange}\n                    />\n                </div>\n\n                <div>\n                    <label>Is Public Donor:</label>\n                    <div>\n                        <input\n                            type=\"checkbox\"\n                            id=\"is_public_donor\"\n                            name=\"is_public_donor\"\n                            checked={userData.is_public_donor === 'Y'}\n                            onChange={(e) => {\n                                setUserData((prevUserData) => ({\n                                    ...prevUserData,\n                                    is_public_donor: e.target.checked ? 'Y' : 'N',\n                                }));\n                            }}\n                        />\n                        <label htmlFor=\"is_public_donor_yes\">Yes</label>\n                    </div>\n                    <div>\n                        <input\n                            type=\"checkbox\"\n                            id=\"is_public_donor_no\"\n                            name=\"is_public_donor_no\"\n                            checked={userData.is_public_donor === 'N'}\n                            onChange={(e) => {\n                                setUserData((prevUserData) => ({\n                                    ...prevUserData,\n                                    is_public_donor: e.target.checked ? 'N' : 'Y',\n                                }));\n                            }}\n                        />\n                        <label htmlFor=\"is_public_donor_no\">No</label>\n                    </div>\n                </div>\n\n                <div>\n                    <button type=\"submit\" className=\"submit-button\">Submit</button>\n                </div>\n            </form>\n        </div>\n    );\n}\n\nexport default UserDataInput;\n","/Users/emon/Desktop/Blood-Bank-Management-System/src/Pages/ViewDonor.js",[],[],"/Users/emon/Desktop/Blood-Bank-Management-System/src/Pages/DonorInput.js",["76","77","78"],[],"import React, { useEffect, useState } from 'react';\nimport '../App.css';\nimport '../styles.css';\n\nfunction UserDataInput({ onUserInput }) {\n  const [userData, setUserData] = useState({\n    id: '',\n    firstName: '',\n    lastName: '',\n    phone: '',\n    bloodType: '',\n    location: '',\n    email: '',\n    donationCount: '',\n  });\n  const [loading, setLoading] = useState(false);\n  const [submissionStatus, setSubmissionStatus] = useState(null);\n\n  const handleInputChange = (e) => {\n    const { name, value } = e.target;\n    setUserData((prevUserData) => ({\n      ...prevUserData,\n      [name]: value,\n    }));\n  };\n\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n\n    try {\n      setLoading(true);\n\n      const response = await fetch('http://localhost:3000/api/insert-data', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify(userData),\n      });\n\n      if (response.ok) {\n        console.log('Data successfully inserted into the database');\n        setSubmissionStatus('success');\n        // Optionally, reset the form or provide feedback to the user\n        setUserData({\n          id: '',\n          firstName: '',\n          lastName: '',\n          phone: '',\n          bloodType: '',\n          location: '',\n          email: '',\n          donationCount: '',\n        });\n        onUserInput(userData);\n      } else {\n        console.error('Failed to insert data into the database');\n        setSubmissionStatus('failure');\n        // Optionally, provide user-friendly error message or feedback\n      }\n    } catch (error) {\n      console.error('Error:', error);\n      setSubmissionStatus('failure');\n      // Optionally, provide user-friendly error message or feedback\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const handleKeyDown = (e) => {\n    const activeElement = document.activeElement;\n    const inputFields = Array.from(document.getElementsByTagName('input'));\n    const currentIndex = inputFields.indexOf(activeElement);\n\n    if (e.key === 'ArrowDown') {\n      e.preventDefault();\n      const nextIndex = (currentIndex + 1) % inputFields.length;\n      inputFields[nextIndex].focus();\n    } else if (e.key === 'ArrowUp') {\n      e.preventDefault();\n      const prevIndex = (currentIndex - 1 + inputFields.length) % inputFields.length;\n      inputFields[prevIndex].focus();\n    }\n  };\n\n  return (\n    <div>\n      <h2>Donor Information</h2>\n      <form onSubmit={handleSubmit} className=\"user-input-form\" onKeyDown={handleKeyDown}>\n        <div>\n          <label htmlFor=\"id\">ID:</label>\n          <input\n            type=\"text\"\n            id=\"id\"\n            name=\"id\"\n            value={userData.id}\n            onChange={handleInputChange}\n          />\n        </div>\n        <div>\n          <label htmlFor=\"firstName\">First Name:</label>\n          <input\n            type=\"text\"\n            id=\"firstName\"\n            name=\"firstName\"\n            value={userData.firstName}\n            onChange={handleInputChange}\n          />\n        </div>\n        <div>\n          <label htmlFor=\"lastName\">Last Name:</label>\n          <input\n            type=\"text\"\n            id=\"lastName\"\n            name=\"lastName\"\n            value={userData.lastName}\n            onChange={handleInputChange}\n          />\n        </div>\n        <div>\n          <label htmlFor=\"phone\">Phone:</label>\n          <input\n            type=\"text\"\n            id=\"phone\"\n            name=\"phone\"\n            value={userData.phone}\n            onChange={handleInputChange}\n          />\n        </div>\n        <div>\n          <label htmlFor=\"bloodType\">Blood Type:</label>\n          <input\n            type=\"text\"\n            id=\"bloodType\"\n            name=\"bloodType\"\n            value={userData.bloodType}\n            onChange={handleInputChange}\n          />\n        </div>\n        <div>\n          <label htmlFor=\"location\">Location:</label>\n          <input\n            type=\"text\"\n            id=\"location\"\n            name=\"location\"\n            value={userData.location}\n            onChange={handleInputChange}\n          />\n        </div>\n        <div>\n          <label htmlFor=\"email\">Email:</label>\n          <input\n            type=\"text\"\n            id=\"email\"\n            name=\"email\"\n            value={userData.email}\n            onChange={handleInputChange}\n          />\n        </div>\n        <div>\n          <label htmlFor=\"donationCount\">Donation Count:</label>\n          <input\n            type=\"text\"\n            id=\"donationCount\"\n            name=\"donationCount\"\n            value={userData.donationCount}\n            onChange={handleInputChange}\n          />\n        </div>\n        <div>\n          <button type=\"submit\" className=\"submit-button\">Submit</button>\n        </div>\n      </form>\n    </div>\n  );\n}\n\nexport default UserDataInput;\n","/Users/emon/Desktop/Blood-Bank-Management-System/src/Pages/DataInput.js",["79","80","81"],[],"import React, { useState } from 'react';\nimport { Link, Route, Routes } from 'react-router-dom';\nimport ViewDonor from './ViewDonor';\nimport DataInput from './DonorInput';\nimport Dashboard from './Dashboard'; // Import your Home component\nimport '../styles.css';\nimport '../App.css';\nimport logo from '../image/spectre.jpg';\n\nfunction HomePage() {\n  const [selectedOption, setSelectedOption] = useState(null);\n  const [showDefaultContent, setShowDefaultContent] = useState(true);\n\n  const option1Content = <ViewDonor />;\n  const option2Content = (\n    <div>\n      <h2>Option 2 Content</h2>\n      <p>This is the content for Option 2.</p>\n    </div>\n  );\n  const option3Content = (\n    <div>\n      <h2>Option 3 Content</h2>\n      <p>This is the content for Option 3.</p>\n    </div>\n  );\n  const option4Content = <DataInput />;\n\n  // Handle option click\n  const handleOptionClick = (option) => {\n    setSelectedOption(option);\n    setShowDefaultContent(false);\n  };\n\n  // Handle Home button click\n  const handleHomeClick = () => {\n    setSelectedOption(null); // Reset the selected option\n    setShowDefaultContent(true);\n  };\n\n  return (\n    <div>\n      <div className=\"header-container\">\n        <img src={logo} className=\"rotating-logo\" alt=\"logo\" />\n        <h1>Blood Management System</h1>\n      </div>\n      <div className=\"button-container\">\n        <Link to=\"/Dashboard\" className=\"custom-button bigger-button link-button\">\n          Home\n        </Link>\n        <div className=\"options-container\">\n          <button\n            onClick={() => handleOptionClick(option1Content)}\n            className=\"custom-button bigger-button\"\n          >\n            Donor/Recipient\n          </button>\n          <button\n            onClick={() => handleOptionClick(option2Content)}\n            className=\"custom-button bigger-button\"\n          >\n            Appointment\n          </button>\n          <button\n            onClick={() => handleOptionClick(option3Content)}\n            className=\"custom-button bigger-button\"\n          >\n            Health History\n          </button>\n        </div>\n      </div>\n\n      <div className=\"content-container\">\n        {/* Use Routes to render the selected option based on the route */}\n        <Routes>\n          <Route path=\"/Dashboard\" element={<Dashboard />} />\n          <Route path=\"/\" element={<>{selectedOption}</>} />\n        </Routes>\n      </div>\n    </div>\n  );\n}\n\nexport default HomePage;\n",{"ruleId":"82","severity":1,"message":"83","line":15,"column":10,"nodeType":"84","messageId":"85","endLine":15,"endColumn":18},{"ruleId":"82","severity":1,"message":"86","line":4,"column":8,"nodeType":"84","messageId":"85","endLine":4,"endColumn":18},{"ruleId":"82","severity":1,"message":"87","line":27,"column":9,"nodeType":"84","messageId":"85","endLine":27,"endColumn":23},{"ruleId":"82","severity":1,"message":"88","line":36,"column":9,"nodeType":"84","messageId":"85","endLine":36,"endColumn":24},{"ruleId":"82","severity":1,"message":"89","line":1,"column":27,"nodeType":"84","messageId":"85","endLine":1,"endColumn":36},{"ruleId":"82","severity":1,"message":"89","line":1,"column":17,"nodeType":"84","messageId":"85","endLine":1,"endColumn":26},{"ruleId":"82","severity":1,"message":"90","line":18,"column":12,"nodeType":"84","messageId":"85","endLine":18,"endColumn":19},{"ruleId":"82","severity":1,"message":"91","line":19,"column":12,"nodeType":"84","messageId":"85","endLine":19,"endColumn":28},{"ruleId":"82","severity":1,"message":"89","line":1,"column":17,"nodeType":"84","messageId":"85","endLine":1,"endColumn":26},{"ruleId":"82","severity":1,"message":"90","line":16,"column":10,"nodeType":"84","messageId":"85","endLine":16,"endColumn":17},{"ruleId":"82","severity":1,"message":"91","line":17,"column":10,"nodeType":"84","messageId":"85","endLine":17,"endColumn":26},{"ruleId":"82","severity":1,"message":"92","line":12,"column":10,"nodeType":"84","messageId":"85","endLine":12,"endColumn":28},{"ruleId":"82","severity":1,"message":"87","line":27,"column":9,"nodeType":"84","messageId":"85","endLine":27,"endColumn":23},{"ruleId":"82","severity":1,"message":"88","line":36,"column":9,"nodeType":"84","messageId":"85","endLine":36,"endColumn":24},"no-unused-vars","'patients' is assigned a value but never used.","Identifier","unusedVar","'DonorInput' is defined but never used.","'option4Content' is assigned a value but never used.","'handleHomeClick' is assigned a value but never used.","'useEffect' is defined but never used.","'loading' is assigned a value but never used.","'submissionStatus' is assigned a value but never used.","'showDefaultContent' is assigned a value but never used."]